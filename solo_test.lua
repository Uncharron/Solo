local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Powerby : CodeX HUB : Arise_Crossover",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "CodeX HUB",
    LoadingSubtitle = "by CodeX",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })
 local RankMapping = {
    E = 1,
    D = 2,
    C = 3,
    B = 4,
    A = 5,
    S = 6,
    SS = 7,
    G = 8,
    N = 9
}
local autoArise = false -- default
local attackRunningDungen = false  -- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
local attackRunning = false  -- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
local autoDestroy = false
local Setspaawnp = false
local Setspaawnp2 = false
local Setspaawnp3 = false
local Setspaawnp4 = false
local Setspaawnp5 = false
local Setspaawnp6 = false
local Setspaawnp7 = false
local autosellexe = false
local equipBestPetsex = false
local Punch = false
local autoinf = false
local autoDungeon = false
local walkSpeed = 16
local loopEnabled = false
local SelectRank = RankMapping["E"] -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
local TP_RANGE = 350  -- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞ TP (‡∏´‡∏ô‡πà‡∏ß‡∏¢: Studs)
local highestHP = 1000
local STEP_DISTANCE = 100 -- ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà TP ‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡πâ‡∏≤‡∏ß

local ProfileTab = Window:CreateTab("üëºProfileüëº", nil) -- Title, Image
local MainSection = ProfileTab:CreateSection("Profile Playerüëº")

local player = game:GetService("Players").LocalPlayer
local players = game:GetService("Players")
local serverStats = game:GetService("Stats") -- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
local dataPing = serverStats:FindFirstChild("Data Ping") and serverStats["Data Ping"]:GetValueString() or "N/A" -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Ping

local leaderstats = player:FindFirstChild("leaderstats")

local coins = leaderstats and leaderstats:FindFirstChild("Cash") and leaderstats.Cash.Value or "N/A"
local rank = leaderstats and leaderstats:FindFirstChild("Rank") and leaderstats.Rank.Value or "N/A"

local playerCount = #players:GetPlayers()
local maxPlayers = players.MaxPlayers
local pingValue = (dataPing ~= "N/A" and tonumber(dataPing:match("(%d+)"))) or "N/A" -- ‡πÅ‡∏õ‡∏•‡∏á Ping ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

--local player = Players.LocalPlayer
local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
local worldFolder = workspace:WaitForChild("__Main"):WaitForChild("__World")
local currentRoomNumber = 2

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Section ‡∏ö‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
ProfileTab:CreateSection("üë• User Name: " .. player.Name)
-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ Rank ‡πÅ‡∏•‡∏∞ Coins ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if coins and rank then
    ProfileTab:CreateSection("üèÜ Rank: " .. rank)
    ProfileTab:CreateSection("üí∞ Coins: " .. coins)
end
ProfileTab:CreateSection("üïπÔ∏è Players in Server: " .. playerCount .. " / " .. maxPlayers)

if pingValue ~= "N/A" then
    ProfileTab:CreateSection("üì° Network Info: " .. pingValue .. " ms") -- ‡πÅ‡∏™‡∏î‡∏á Ping ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
else
    ProfileTab:CreateSection("üì° Network Info: Unable to fetch Ping") -- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á Ping ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
end

-- ‡∏•‡∏¥‡∏á‡∏Å‡πå Discord
ProfileTab:CreateSection("üñ•Ô∏è Discord Link: https://discord.gg/HHwaZxBXUd")

-- ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå Discord
local Button = ProfileTab:CreateButton({
    Name = "Copy Link Discord",
    Callback = function()
        setclipboard("https://discord.gg/HHwaZxBXUd") -- ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ö‡∏≠‡∏£‡πå‡∏î
        print("Discord link copied to clipboard!") -- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏ô‡πÇ‡∏ã‡∏•
    end,
})

local Tab = Window:CreateTab("üõéÔ∏èMainüõéÔ∏è", nil) -- Title, Image
local MainSection = Tab:CreateSection("MainüõéÔ∏è")


-- ‡∏™‡πÑ‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WalkSpeed
local Slider = Tab:CreateSlider({
    Name = "Walk Speed",
    Range = {16, 300},
    Increment = 1,
    Suffix = "Bananas",
    CurrentValue = 16,
    Flag = "Slider1", 
    Callback = function(Value)
        walkSpeed = Value -- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô loop      
    end,
})

-- Toggle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î loop
local Toggle = Tab:CreateToggle({
    Name = "Auto WalkSpeed Loop",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        loopEnabled = Value
        if loopEnabled then
            -- ‡πÄ‡∏£‡∏¥‡πà‡∏° loop
            task.spawn(function()
                while loopEnabled do
                    local play = game.Players.LocalPlayer.character       
                    play.Humanoid.WalkSpeed = (walkSpeed)
                    task.wait(0.2) -- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ loop (0.1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                end
            end)
        end
    end,
})
 local Slider = Tab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 300},
    Increment = 1,
    Suffix = "Bananas",
    CurrentValue = 16,
    Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps   
    Callback = function(Value)
        local play = game.Players.LocalPlayer.character       
        play.Humanoid.JumpPower = (Value)
    -- The function that takes place when the slider changes
    -- The variable (Value) is a number which correlates to the value the slider is currently at
    end,
 })
 local Slider = Tab:CreateSlider({
    Name = "CameraMaxZoomDistance",
    Range = {36, 300},
    Increment = 1,
    Suffix = "Bananas",
    CurrentValue = 36,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps   
    Callback = function(Value)
        game:GetService("Players").LocalPlayer.CameraMaxZoomDistance = (Value)
    end,
 })

 local Slider = Tab:CreateSlider({
    Name = "Gravity",
    Range = {1, 170},
    Increment = 1,
    Suffix = "Bananas",
    CurrentValue = 170,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps   
    Callback = function(Value)
        game.Workspace.Gravity = (Value)
    end,
 })
 local Slider = Tab:CreateSlider({
    Name = "HipHeight",
    Range = {0, 300},
    Increment = 1,
    Suffix = "Bananas",
    CurrentValue = 1,
    Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps   
    Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.HipHeight = Value
    end,
 })
 local LocalPlayer = game:GetService("Players").LocalPlayer
 local Noclip = false
 local NoclipConnection = nil
 
 function NoclipConnectionx()
     local RunService = game:GetService("RunService")
     local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait() -- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Character
     
     -- ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
     if NoclipConnection then
         NoclipConnection:Disconnect()
     end
 
     -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà
     NoclipConnection = RunService.Stepped:Connect(function()
         if Noclip and LocalCharacter then
             for _, v in pairs(LocalCharacter:GetDescendants()) do
                 if v:IsA("BasePart") and v.CanCollide == true then
                     v.CanCollide = false
                 end
             end
         end
     end)
 end
 
 -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Noclip
 function ToggleNoclip(state)
     Noclip = state
     if Noclip then
         print("Noclip Enabled")
         NoclipConnectionx()
     else
         print("Noclip Disabled")
         if NoclipConnection then
             NoclipConnection:Disconnect()
             NoclipConnection = nil
         end
     end
 end

 local Toggle = Tab:CreateToggle({
    Name = "Noclip",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        ToggleNoclip(Value)
        Noclip = Value
            
    end,
 })
 local MainSection = Tab:CreateSection("Setting Auto Farm")
 local Input = Tab:CreateInput({
    Name = "RANGE",
    CurrentValue = TP_RANGE,
    PlaceholderText = "Rang",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        TP_RANGE = Text
    -- The function that takes place when the input is changed
    -- The variable (Text) is a string for the value in the text box
    end,
 })
 local Input = Tab:CreateInput({
    Name = "MIN HP",
    CurrentValue = highestHP,
    PlaceholderText = "highest_HP",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        highestHP = Text
    -- The function that takes place when the input is changed
    -- The variable (Text) is a string for the value in the text box
    end,
 })
local MainSection = Tab:CreateSection("Setting Auto Farm")
local Toggle = Tab:CreateToggle({
    Name = "Auto Arise",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle
        if Value then
            autoArise = Value  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
            

        else
            autoArise = Value  -- ‡∏´‡∏¢‡∏∏‡∏î attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡∏õ‡∏¥‡∏î
        end
    end,
})
local Toggle = Tab:CreateToggle({
    Name = "Auto Destroy",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle
        if Value then
            autoDestroy = Value  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
            

        else
            autoDestroy = Value  -- ‡∏´‡∏¢‡∏∏‡∏î attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡∏õ‡∏¥‡∏î
        end
    end,
})
local Toggle = Tab:CreateToggle({
    Name = "Auto infinit",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle
        if Value then    
            autoinf = Value 
        else
            autoinf = Value
        end
    end,
})
local Toggle = Tab:CreateToggle({
    Name = "Auto Dungeon Islans",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle
        if Value then    
            autoDungeon = Value          
        else
            autoDungeon = Value
        end
    end,
})
local Button = Tab:CreateButton({
    Name = "Auto Dungeon",
    Callback = function()
        autoCreateAndStartDungeonex()
    end,
 })
local MainSection = Tab:CreateSection("Auto Farm")
local Toggle = Tab:CreateToggle({
    Name = "Auto Farm",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle
        if Value then
            attackRunningDungen = Value  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
            attackLoopDungen()  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡πÄ‡∏õ‡∏¥‡∏î         

        else
            attackRunningDungen = Value  -- ‡∏´‡∏¢‡∏∏‡∏î attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡∏õ‡∏¥‡∏î
        end
    end,
})
local Toggle = Tab:CreateToggle({
    Name = "Anti AFK",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle
        if Value then
            
            connection = game:GetService("Players").LocalPlayer.Idled:Connect(function()
            game:GetService("VirtualUser"):CaptureController()
            game:GetService("VirtualUser"):ClickButton2(Vector2.new())
            end)
                
           

        else
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end,
})


local MainSection = Tab:CreateSection("Auto Equip")
local Toggle = Tab:CreateToggle({
    Name = "Auto EquipBest",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle
        if Value then    
            equipBestPetsex = Value
            equipBestPets()
        else
            equipBestPetsex = Value
        end
    end,
})
local Toggle = Tab:CreateToggle({
    Name = "Auto Punch",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle       
        Punch = Value
        if Punch then
            spawn(function()
                PunchATT(Enemye)
            end)
        end
    end,
})

local MainSection = Tab:CreateSection("Auto SELL")
local Dropdown = Tab:CreateDropdown({
    Name = "Select Rank",
    Options = {"E", "D", "C", "B", "A", "S", "SS", "G", "N"},
    CurrentOption = {"E"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Option)
        local selected = typeof(Option) == "table" and Option[1] or Option
        print("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Rank:", selected)
        SelectRank = RankMapping[selected]
        print("SelectRank:", SelectRank)
    end,
    
})
local Toggle = Tab:CreateToggle({
    Name = "Auto SELL",
    CurrentValue = false,
    Flag = "AttackLoopFlag", -- Flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å
    Callback = function(Value)
        -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Toggle
        if Value then    
            autosellexe = Value
            autosellex()
        else
            autosellexe = Value
        end
    end,
})

local Tab2 = Window:CreateTab("üè†TP & Spawnüè†", nil) -- Title, Image
local Section = Tab2:CreateSection("HOMEüè†")
local Button = Tab2:CreateButton({
    Name = "Auto Set Spawn Solo World",
    Callback = function()
        Setspaawnp = true  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
        SetSpawn()  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡πÄ‡∏õ‡∏¥‡∏î         

    end,
 })
local Button = Tab2:CreateButton({
    Name = "Auto Set Spawn NarutoWorld",
    Callback = function()
        Setspaawnp2 = true  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
        SetSpawn()  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡πÄ‡∏õ‡∏¥‡∏î         

    end,
 })
local Button = Tab2:CreateButton({
    Name = "Auto Set Spawn OPWorld",
    Callback = function()
        Setspaawnp3 = true  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
        SetSpawn()  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡πÄ‡∏õ‡∏¥‡∏î         

    end,
 })
 local Button = Tab2:CreateButton({
    Name = "Auto Set Spawn BleachWorld",
    Callback = function()
        Setspaawnp4 = true  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
        SetSpawn()  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡πÄ‡∏õ‡∏¥‡∏î         

    end,
 })
 local Button = Tab2:CreateButton({
    Name = "Auto Set Spawn BCWorld",
    Callback = function()
        Setspaawnp5 = true  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
        SetSpawn()  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡πÄ‡∏õ‡∏¥‡∏î         

    end,
 })
 local Button = Tab2:CreateButton({
    Name = "Auto Set Spawn ChainsawWorld",
    Callback = function()
        Setspaawnp6 = true  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
        SetSpawn()  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡πÄ‡∏õ‡∏¥‡∏î         

    end,
 })
 local Button = Tab2:CreateButton({
    Name = "Auto Set Spawn JojoWorld",
    Callback = function()
        Setspaawnp7 = true  -- ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á attackLoop
        SetSpawn()  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° attackLoop ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Toggle ‡πÄ‡∏õ‡∏¥‡∏î         

    end,
 })
local MainSection = Tab2:CreateSection("Reset")
local Button = Tab2:CreateButton({
    Name = "Reset Player",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player and player.Character then
            -- ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÄ‡∏î‡∏¥‡∏°
            player.Character:BreakJoints()
    
            -- ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
            player.CharacterAdded:Wait()
            
            --//Script Roblox Arise_Crossover by : Code X HUB
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Uncharron/CodeX.lua/refs/heads/main/codex.lua", true))()

        end
    end,
 })
 

local MainSection = Tab2:CreateSection("Teleport")
local Button = Tab2:CreateButton({
    Name = "TP To Upgrader",
    Callback = function()
        local Players = game:GetService("Players")
        --game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(593.784912, 28.102459, 189.892761, -0.667140841, 0, 0.744931638, 0, 1, 0, -0.744931638, 0, -0.667140841)
        local player = Players.LocalPlayer
        local targetCFrame = CFrame.new(593.784912, 28.102459, 189.892761, -0.667140841, 0, 0.744931638, 0, 1, 0, -0.744931638, 0, -0.667140841)
          -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ character ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
          
        -- Loop ‡∏à‡∏ô‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        while (hrp.Position - targetCFrame.Position).magnitude > 1 do
            hrp.CFrame = targetCFrame
            task.wait(0.1)
        end
    end,
})
local Button = Tab2:CreateButton({
    Name = "TP To Enchanter",
    Callback = function()
        local Players = game:GetService("Players")
        --game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(593.784912, 28.102459, 189.892761, -0.667140841, 0, 0.744931638, 0, 1, 0, -0.744931638, 0, -0.667140841)
        local player = Players.LocalPlayer
        local targetCFrame = CFrame.new(612.509766, 28.0839901, 226.756882, 0.744507194, 0, 0.66761446, 0, 1, 0, -0.66761446, 0, 0.744507194)
          -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ character ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
          
        -- Loop ‡∏à‡∏ô‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        while (hrp.Position - targetCFrame.Position).magnitude > 1 do
            hrp.CFrame = targetCFrame
            task.wait(0.1)
        end
    end,
})
local Button = Tab2:CreateButton({
    Name = "TP To Ant lans",
    Callback = function()
        local Players = game:GetService("Players")
        --game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(593.784912, 28.102459, 189.892761, -0.667140841, 0, 0.744931638, 0, 1, 0, -0.744931638, 0, -0.667140841)
        local player = Players.LocalPlayer
        local targetCFrame = CFrame.new(3834.31274, 60.1047897, 3051.87012, 0.887708068, 1.10925555e-07, 0.46040675, -2.5959551e-07, 1, 2.59595396e-07, -0.46040675, -3.49964438e-07, 0.887708068)
          -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ character ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô
        local character = player.Character or player.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")
          
        -- Loop ‡∏à‡∏ô‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        while (hrp.Position - targetCFrame.Position).magnitude > 1 do
            hrp.CFrame = targetCFrame
            task.wait(0.1)
        end
    end,
})

 local ServerTab = Window:CreateTab("üåÉ Server üåÉ", nil) -- Title, Image
 local MainSection = ServerTab:CreateSection("Server üåÉ")
 
 function getServerID()
     return game.JobId
 end
 local Section = ServerTab:CreateSection("Server ID: " .. getServerID())
 
 local Button = ServerTab:CreateButton({
     Name = "Copy Server ID",
     Callback = function()
         setclipboard(tostring(getServerID()))
         bigGreenItalicText("Copied Server ID to clipboard!")
     end,
  })
 
 
 local Section = ServerTab:CreateSection("Teleport Jobid Server")
 getgenv().hyperlibblock = false
 
 -- ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö JobId ‡∏à‡∏≤‡∏Å Input
 local targetJobId = ""
 
 -- PlaceId ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
 local placeId = game.PlaceId
 
 -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Input ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏õ‡πâ‡∏≠‡∏ô JobId
 local Input = ServerTab:CreateInput({
    Name = "Enter Server JobId",
    CurrentValue = "",
    PlaceholderText = "Input JobId here",
    RemoveTextAfterFocusLost = false,
    Flag = "JobIdInput",
    Callback = function(Text)
        targetJobId = Text -- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ targetJobId
    end,
 })
 
 -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï
 local Button = ServerTab:CreateButton({
    Name = "Teleport to Server",
    Callback = function()
        if targetJobId ~= "" then
            local success, err = pcall(function()
                game:GetService("TeleportService"):TeleportToPlaceInstance(placeId, targetJobId, game.Players.LocalPlayer)
            end)
 
            if not success then
                warn("Teleport failed: " .. tostring(err))
            else
                print("Teleporting to server with JobId: " .. targetJobId)
            end
        else
            warn("Please enter a valid JobId!")
        end
    end,
 })
 
 local Section = ServerTab:CreateSection("Hop Server")
 
 local Button = ServerTab:CreateButton({
     Name = "Auto Rejoin",
     Callback = function()
         getgenv().hyperlibblock = false
          game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
     end,
  })
 
  local Button = ServerTab:CreateButton({
     Name = "Hop Server Low",
     Callback = function()
         local PlaceID = game.PlaceId
         local AllIDs = {}
         local foundAnything = ""
         local actualHour = os.date("!*t").hour
         
         -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
         function TPReturner()
             local sortOrder = math.random(1, 2) == 1 and "Asc" or "Desc"
             local Site
             if foundAnything == "" then
                 Site = game.HttpService:JSONDecode(
                     game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=' ..
                     sortOrder .. '&limit=100&excludeFullGames=true'))
             else
                 Site = game.HttpService:JSONDecode(
                     game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=' ..
                     sortOrder .. '&limit=100&cursor=' .. foundAnything .. '&excludeFullGames=true'))
             end
         
             if Site.nextPageCursor and Site.nextPageCursor ~= "null" then
                 foundAnything = Site.nextPageCursor
             else
                 foundAnything = ""
             end
         
             local serverList = {}
             for _, v in pairs(Site.data) do
                 if tonumber(v.maxPlayers) > tonumber(v.playing) then
                     table.insert(serverList, tostring(v.id))
                 end
             end
         
             if #serverList > 0 then
                 local randomIndex = math.random(1, #serverList)
                 local randomServerID = serverList[randomIndex]
                 table.insert(AllIDs, randomServerID)
         
                 pcall(function()
                     print("Teleporting to server ID: " .. randomServerID)
                     game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, randomServerID, game.Players.LocalPlayer)
                 end)
             else
                 if foundAnything ~= "" then
                     TPReturner()
                 else
                     print("No available servers found!")
                 end
             end
         end
         
         -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
         function Teleport()
             while wait() do
                 pcall(function()
                     TPReturner()
                 end)
             end
         end
         
         -- UI/‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô GUI ‡πÑ‡∏î‡πâ)
         spawn(function()
             while true do
                 wait(0.1)
                 print("Teleporting")
                 wait(0.1)
                 print("Teleporting.")
                 wait(0.1)
                 print("Teleporting..")
                 wait(0.1)
                 print("Teleporting...")
             end
         end)
         
         -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
         print("Starting server hopper...")
         Teleport()
 
 
 
     end,
  })
  local Button = ServerTab:CreateButton({
     Name = "Hop Server Full",
     Callback = function()
         local PlaceID = game.PlaceId
         local AllIDs = {}
         local foundAnything = ""
         local maxRetries = 5 -- ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà
         
         function TPReturner()
             local Site
             if foundAnything == "" then
                 Site = game.HttpService:JSONDecode(
                     game:HttpGet('https://games.roblox.com/v1/games/' ..
                     PlaceID .. '/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true'))
             else
                 Site = game.HttpService:JSONDecode(
                     game:HttpGet('https://games.roblox.com/v1/games/' ..
                     PlaceID .. '/servers/Public?sortOrder=Desc&limit=100&cursor=' .. foundAnything .. '&excludeFullGames=true'))
             end
         
             if Site.nextPageCursor and Site.nextPageCursor ~= "null" then
                 foundAnything = Site.nextPageCursor
             else
                 foundAnything = ""
             end
         
             local serverList = Site.data
             if #serverList > 0 then
                 for _, v in pairs(serverList) do
                     if tonumber(v.maxPlayers) > tonumber(v.playing) then
                         local serverID = tostring(v.id)
                         table.insert(AllIDs, serverID)
         
                         pcall(function()
                             print("Teleporting to server ID: " .. serverID)
                             game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, serverID, game.Players.LocalPlayer)
                         end)
                         return
                     end
                 end
             else
                 print("No servers found on this page.")
                 if foundAnything ~= "" then
                     TPReturner()
                 end
             end
         end
         
         function Teleport()
             local retries = 0
             while retries < maxRetries do
                 pcall(function()
                     TPReturner()
                 end)
                 retries = retries + 1
                 wait(1)
             end
             print("No suitable servers found after " .. maxRetries .. " attempts.")
         end
         
         -- UI/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
         spawn(function()
             while true do
                 getgenv().serverhopperhigher:UpdateButton("Teleporting")
                 wait(0.1)
                 getgenv().serverhopperhigher:UpdateButton("Teleporting.")
                 wait(0.1)
                 getgenv().serverhopperhigher:UpdateButton("Teleporting..")
                 wait(0.1)
                 getgenv().serverhopperhigher:UpdateButton("Teleporting...")
                 wait(0.1)
             end
         end)
         
         -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
         print("Starting server hopper...")
         Teleport()
 
 
    
     end,
  })
  local Button = ServerTab:CreateButton({
     Name = "Hop Server Private",
     Callback = function()
         local PlaceID = game.PlaceId
         local AllIDs = {}
         local foundAnything = ""
         local actualHour = os.date("!*t").hour
         
         function TPReturner()
             local sortOrder = math.random(1, 2) == 1 and "Asc" or "Desc"
             local Site
             if foundAnything == "" then
                 Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' ..
                 PlaceID .. '/servers/Public?sortOrder=' .. sortOrder .. '&limit=100&excludeFullGames=true'))
             else
                 Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' ..
                 PlaceID .. '/servers/Public?sortOrder=' .. sortOrder .. '&limit=100&cursor=' .. foundAnything .. '&excludeFullGames=true'))
             end
             if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                 foundAnything = Site.nextPageCursor
             end
         
             local serverList = {}
             for _, v in pairs(Site.data) do
                 if tonumber(v.maxPlayers) > tonumber(v.playing) then
                     table.insert(serverList, tostring(v.id))
                 end
             end
         
             if #serverList > 0 then
                 local randomIndex = math.random(1, #serverList) 
                 local randomServerID = serverList[randomIndex]
                 table.insert(AllIDs, randomServerID)
         
                 pcall(function()
                     bigGreenItalicText("Teleporting to a random server now!")
                     game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, randomServerID, game.Players.LocalPlayer)
                 end)
             else
                 if foundAnything ~= "" then
                     TPReturner()
                 end
             end
         end
         
         function Teleport()
             while wait() do
                 pcall(function()
                     TPReturner()
                 end)
             end
         end
         
         spawn(function()
             while true do
                 getgenv().serverhopper:UpdateButton("Teleporting")
                 wait(0.1)
                 getgenv().serverhopper:UpdateButton("Teleporting.")
                 wait(0.1)
                 getgenv().serverhopper:UpdateButton("Teleporting..")
                 wait(0.1)
                 getgenv().serverhopper:UpdateButton("Teleporting...")
                 wait(0.1)
             end
         end)
         
         bigGreenItalicText("Teleporting to a random server...")
         Teleport()
 
 
     
     end,
  })
  local WebhookTab = Window:CreateTab("üìù Webhook üìù", nil) -- Title, Image
local MainSection = WebhookTab:CreateSection("Webhook üìù")

--// Config
getgenv().whscript = "Code X HUB" -- ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
getgenv().webhookexecUrl = "" -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
local webhookEnabled = false -- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Webhook (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î)

--// ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
local player = game:GetService("Players").LocalPlayer
local httpService = game:GetService("HttpService")

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏°
local gameName = "Unknown Game"
pcall(function()
    gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name
end)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Webhook
local function sendWebhook()
    if not webhookEnabled then
        print("Webhook is currently disabled.")
        return
    end

    if getgenv().webhookexecUrl == "" then
        print("Webhook URL is not set!")
        return
    end

    -- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    local completeTime = os.date("%Y-%m-%d %H:%M:%S")

    local character = player.Character or workspace.__Main.__Players:FindFirstChild(player.Name)
    local humanoid = character and character:FindFirstChild("Humanoid")
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")

    local health = humanoid and humanoid.Health or "N/A"
    local maxHealth = humanoid and humanoid.MaxHealth or "N/A"
    local position = rootPart and rootPart.Position or "N/A"

    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö leaderstats ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤
    local leaderstats = player:FindFirstChild("leaderstats")
    local coins = leaderstats and leaderstats:FindFirstChild("Cash") and leaderstats.Cash.Value or "N/A"
    local rank = leaderstats and leaderstats:FindFirstChild("Rank") and leaderstats.Rank.Value or "N/A"

    local data = {
        ["content"] = "@everyone",
        ["embeds"] = {
            {
                ["title"] = "üöÄ ** Code X HUB LOG | Fish **",
                ["type"] = "rich",
                ["color"] = tonumber(0x34DB98),
                ["fields"] = {
                    {
                        ["name"] = "üîç **Info**",
                        ["value"] = "```üíª Script Name: " .. getgenv().whscript .. "\nüÜî Game Name: " .. gameName .. "\n‚è∞ Executed At: " .. completeTime .. "```",
                        ["inline"] = false
                    },
                    {
                        ["name"] = "üë§ **Player Info**",
                        ["value"] = "```üß∏ Username: " .. player.Name .. "\nüìù Display Name: " .. player.DisplayName .. "\nüÜî UserID: " .. player.UserId .. "\n‚ù§Ô∏è Health: " .. health .. " / " .. maxHealth .. "\nüèÜ Rank: " .. rank .. "\nüí∞ Coins: " .. coins .. "```",
                        ["inline"] = false
                    },
                    {
                        ["name"] = "üìç **Position**",
                        ["value"] = "```üìç Position: " .. tostring(position) .. "```",
                        ["inline"] = true
                    }
                },
                ["footer"] = {
                    ["text"] = "‚ìä  Code X HUB Log | " .. os.date("%Y-%m-%d %H:%M:%S"),
                }
            }
        }
    }

    local requestData = httpService:JSONEncode(data)
    local headers = {["content-type"] = "application/json"}

    local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request)
    if request then
        request({Url = getgenv().webhookexecUrl, Body = requestData, Method = "POST", Headers = headers})
    else
        warn("HTTP request function not found! Unable to send webhook.")
    end
end

 
 -- UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á Webhook
 local Input = WebhookTab:CreateInput({
     Name = "Webhook URL",
     CurrentValue = "",
     PlaceholderText = "Enter your Webhook URL",
     RemoveTextAfterFocusLost = false,
     Flag = "WebhookInput",
     Callback = function(Text)
         getgenv().webhookexecUrl = Text
         print("Webhook URL set to:", Text)
     end,
 })
 -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook
 local Button = WebhookTab:CreateButton({
     Name = "Test Webhook",
     Callback = function()
         -- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡∏π‡∏Å‡∏Å‡∏î
         local data = {
             ["content"] = "@everyone",
             ["embeds"] = {
                 {
                     ["title"] = "üöÄ **Test Webhook Code X HUB**",
                     --//["description"] = "This is a test message sent via the webhook.",
                     ["type"] = "rich",
                     ["color"] = tonumber(0x34DB98), -- ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
                     ["fields"] = {
                         {
                             ["name"] = "Info",
                             ["value"] = "```Webhook test was triggered manually```",
                             ["inline"] = false
                         }
                     },
                     ["footer"] = {
                         ["text"] = "‚ìä  Code X HUB Log | " .. os.date("%Y-%m-%d %H:%M:%S"),
                     }
                 }
             }
         }
 
         -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á Webhook ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
         if getgenv().webhookexecUrl == "" then
             print("Webhook URL is not set!")
             return
         end
 
         -- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Webhook
         local requestData = game:GetService("HttpService"):JSONEncode(data)
         local headers = {["content-type"] = "application/json"}
 
         local request = http_request or request or (syn and syn.request) or (fluxus and fluxus.request) or (http and http.request)
         if request then
             request({Url = getgenv().webhookexecUrl, Body = requestData, Method = "POST", Headers = headers})
             print("Test Webhook sent!")
         else
             warn("HTTP request function not found! Unable to send webhook.")
         end
     end,
 })
 local SliderWebhook = 2
 local Slider = WebhookTab:CreateSlider({
     Name = "Send Messages every ? seconds",
     Range = {2, 2000},
     Increment = 1,
     Suffix = "seconds",
     CurrentValue = 2,
     Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
     Callback = function(Value)
         SliderWebhook = Value
     -- The function that takes place when the slider changes
     -- The variable (Value) is a number which correlates to the value the slider is currently at
     end,
  })
 -- Toggle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Webhook
 local Toggle = WebhookTab:CreateToggle({
     Name = "Enable Webhook",
     CurrentValue = false,
     Flag = "WebhookToggle",
     Callback = function(Value)
         webhookEnabled = Value
         if Value then
             print("Webhook is enabled!")
             -- ‡∏•‡∏π‡∏õ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Webhook
             spawn(function()
                 while webhookEnabled do
                     sendWebhook()
                     task.wait(SliderWebhook) -- ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                 end
             end)
         else
             print("Webhook is disabled!")
         end
     end,
 })
-------------------------**‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô**----------------------
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()


local function teleportToDungeon()
    local dungeonFolder = workspace:FindFirstChild("__Main"):FindFirstChild("__Dungeon")
    if dungeonFolder then
        for _, dungeon in ipairs(dungeonFolder:GetChildren()) do
            if dungeon:IsA("Part") and dungeon:FindFirstChild("Dungeon") then
                local player = game.Players.LocalPlayer
                if player and player.Character and player.Character.PrimaryPart then
                    player.Character:SetPrimaryPartCFrame(dungeon.PrimaryPart.CFrame)
                    return
                end
            end
        end
    end
end
          
-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
function findClosestEnemies()
    local enemies = workspace.__Main.__Enemies.Client:GetChildren()
    local closestEnemy, nextClosestEnemy = nil, nil
    local shortestDistance, nextShortestDistance = math.huge, math.huge

    for _, enemy in pairs(enemies) do
        if enemy:FindFirstChild("HumanoidRootPart") then
            local distance = (character.PrimaryPart.Position - enemy.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                nextClosestEnemy, nextShortestDistance = closestEnemy, shortestDistance
                closestEnemy, shortestDistance = enemy, distance
            elseif distance < nextShortestDistance then
                nextClosestEnemy, nextShortestDistance = enemy, distance
            end
        end
    end
    return closestEnemy, nextClosestEnemy
end

function SetSpawn()
    if  Setspaawnp then
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "ChangeSpawn",
                    ["Spawn"] = "SoloWorld"
                },
                [2] = "\n"
            }
        } 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))       
    end   
    if  Setspaawnp2 then
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "ChangeSpawn",
                    ["Spawn"] = "NarutoWorld"
                },
                [2] = "\n"
            }
        } 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))       
    end
    if  Setspaawnp3 then
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "ChangeSpawn",
                    ["Spawn"] = "OPWorld"
                },
                [2] = "\n"
            }
        } 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))       
    end
    if  Setspaawnp4 then
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "ChangeSpawn",
                    ["Spawn"] = "BleachWorld"
                },
                [2] = "\n"
            }
        } 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))       
    end
    if  Setspaawnp5 then
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "ChangeSpawn",
                    ["Spawn"] = "BCWorld"
                },
                [2] = "\n"
            }
        } 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))       
    end
    if  Setspaawnp6 then
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "ChangeSpawn",
                    ["Spawn"] = "ChainsawWorld"
                },
                [2] = "\n"
            }
        } 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))       
    end
    if  Setspaawnp7 then
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "ChangeSpawn",
                    ["Spawn"] = "JojoWorld"
                },
                [2] = "\n"
            }
        } 
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))       
    end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
function getEnemyCapture(enemyName)
    local args

    if autoArise then
        args = {
            [1] = {
                [1] = {
                    ["Event"] = "EnemyCapture",
                    ["Enemy"] = enemyName
                },
                [2] = "\4"
            }
        }
    elseif autoDestroy then
        args = {
            [1] = {
                [1] = {
                    ["Event"] = "EnemyDestroy",
                    ["Enemy"] = enemyName
                },
                [2] = "\4"
            }
        }
    end

    -- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ args ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    if args then
        for _ = 1, 3 do
            game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
            wait(0.3)
        end
    else
        warn("‚ö† ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ (autoArise ‡∏´‡∏£‡∏∑‡∏≠ autoDestroy)")
    end
end


local function getEnemyHP(enemy)
    local success, result = pcall(function()
        local enemyData = nil

        -- Loop through every folder in Server
        for _, folder in ipairs(workspace.__Main.__Enemies.Server:GetChildren()) do
            if folder:FindFirstChild(enemy.Name) then
                enemyData = folder[enemy.Name]
                break
            end
        end

        if not enemyData then return 0 end

        local hp = enemyData:GetAttribute("HP")
        return hp or 0
    end)

    return success and result or 0
end

function isEnemyAlive(enemy)
    return enemy and getEnemyHP(enemy) > 0
end


local function getEnemyHPX2(enemy)
    local success, result = pcall(function()
        local enemyData = nil

        -- ‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏∏‡∏Å Part ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô workspace.__Main.__Enemies.Server
        local server = workspace:FindFirstChild("__Main")
        if not server then return 0 end

        server = server:FindFirstChild("__Enemies")
        if not server then return 0 end

        server = server:FindFirstChild("Server")
        if not server then return 0 end

        -- ‡πÉ‡∏ä‡πâ GetDescendants ‡πÅ‡∏ó‡∏ô GetChildren ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏ä‡∏±‡πâ‡∏ô
        for _, obj in ipairs(server:GetDescendants()) do
            -- ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠ Part ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ enemy ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            if obj:IsA("Instance") and obj.Name == enemy.Name then
                enemyData = obj
                break
            end
        end

        if not enemyData then return 0 end

        local hp = enemyData:GetAttribute("HP")
        return hp or 0
    end)

    return success and result or 0
end

function isEnemyAliveX2(enemy)
    return enemy and getEnemyHPX2(enemy) > 0
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
local function getClosestEnemyWithinRange(TP_RANGE)
    local enemiesFolder = workspace:FindFirstChild("__Main"):FindFirstChild("__Enemies"):FindFirstChild("Client")
    if not enemiesFolder then
        warn("‚ùå Enemies folder not found!")
        return nil
    end

    local player = game.Players.LocalPlayer
    if not player or not player.Character or not player.Character.PrimaryPart then
        return nil
    end

    local playerPosition = player.Character.PrimaryPart.Position
    local validEnemies = {}

    -- ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ HP ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy.PrimaryPart and getEnemyHPX2(enemy) > 0 then
            local distance = (enemy.PrimaryPart.Position - playerPosition).Magnitude
            if distance <= TP_RANGE then
                table.insert(validEnemies, {enemy = enemy, distance = distance})
            end
        end
    end

    if #validEnemies == 0 then
        warn("‚ùå No valid enemies found within range!")
        return nil
    end

    -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏à‡∏≤‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡πÑ‡∏Å‡∏•‡∏™‡∏∏‡∏î
    table.sort(validEnemies, function(a, b) return a.distance < b.distance end)
    return validEnemies[1].enemy
end

-- ‡∏´‡∏≤ Room_X ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
local function GetHighestRoomModel()
    local worldFolder = workspace:WaitForChild("__Main"):WaitForChild("__World")
    local highestNumber = 0
    local highestRoom = nil

    for _, obj in pairs(worldFolder:GetChildren()) do
        if obj:IsA("Model") and obj.Name:match("^Room_(%d+)$") then
            local num = tonumber(obj.Name:match("%d+"))
            if num > highestNumber then
                highestNumber = num
                highestRoom = obj
            end
        end
    end

    return highestRoom
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô teleport ‡∏ó‡∏µ‡∏•‡∏∞ 100 studs ‡πÑ‡∏õ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
local function TeleportGraduallyToTarget(targetPos, stepSize)
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local hrp = player.Character and player.Character:WaitForChild("HumanoidRootPart")
    stepSize = stepSize or 100

    while hrp and (hrp.Position - targetPos).Magnitude > stepSize do
        local direction = (targetPos - hrp.Position).Unit
        local nextPos = hrp.Position + direction * stepSize
        hrp.CFrame = CFrame.new(nextPos)
        task.wait(0.1)
    end

    -- ‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πä‡∏∞
    hrp.CFrame = CFrame.new(targetPos + Vector3.new(0, 5, 0)) -- ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
local function TeleportToLatestRoomStepByStep()
    local room = GetHighestRoomModel()
    if not room then
        warn("‡πÑ‡∏°‡πà‡∏û‡∏ö Room_ ‡πÉ‡∏î ‡πÜ")
        return
    end

    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏≤‡∏£‡πå‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ 100m ‡πÑ‡∏õ‡∏¢‡∏±‡∏á:", room.Name)

    local spawn = room:FindFirstChild("PlayersSpawns", true)
    local targetPos

    if spawn and spawn:IsA("BasePart") then
        targetPos = spawn.Position
    else
        targetPos = room:GetPivot().Position
    end

    TeleportGraduallyToTarget(targetPos, 100)
    print("‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß:", room.Name)
end

function tpToFirstEnemyPartStep()
    local enemyFolder = workspace.__Main.__Enemies.Server
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

    for _, enemy in pairs(enemyFolder:GetChildren()) do
        local targetCFrame = nil

        if enemy:IsA("Model") and enemy:FindFirstChild("HumanoidRootPart") then
            targetCFrame = enemy.HumanoidRootPart.CFrame
        elseif enemy:IsA("BasePart") then
            targetCFrame = enemy.CFrame
        end

        if targetCFrame then
            local currentPos = hrp.Position
            local targetPos = targetCFrame.Position + Vector3.new(0, 5, 0)
            local distance = (targetPos - currentPos).Magnitude
            local stepSize = 100

            print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏ó‡∏µ‡∏•‡∏∞ 100 ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á:", enemy.Name)

            while distance > stepSize do
                local direction = (targetPos - currentPos).Unit
                currentPos = currentPos + direction * stepSize
                hrp.CFrame = CFrame.new(currentPos)
                wait(0.05) -- ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏¢‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                distance = (targetPos - currentPos).Magnitude
            end

            -- ‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
            hrp.CFrame = CFrame.new(targetPos)
            print("‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:", enemy.Name)
            return
        end
    end

    warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÉ‡∏ô workspace.__Main.__Enemies.Server")
end
local function getClosestEnemyWithinRangeEx(TP_RANGE)
    local enemiesFolder = workspace:FindFirstChild("__Main"):FindFirstChild("__Enemies"):FindFirstChild("Client")
    if not enemiesFolder then
        warn("Enemies folder not found!")
        return nil
    end
    
    local player = game.Players.LocalPlayer
    if not player or not player.Character or not player.Character.PrimaryPart then
        return nil
    end

    local playerPosition = player.Character.PrimaryPart.Position
    local validEnemies = {}
    
    for _, enemy in ipairs(enemiesFolder:GetChildren()) do
        if enemy:IsA("Model") and enemy.PrimaryPart and getEnemyHPX2(enemy) > 0 then
            local distance = (enemy.PrimaryPart.Position - playerPosition).Magnitude
            if distance <= TP_RANGE then
                table.insert(validEnemies, {enemy = enemy, distance = distance})
            end
        end
    end
    
    if #validEnemies == 0 then

        if  autoinf then
            -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
            TeleportToLatestRoomStepByStep()                     
        end 
        if  autoDungeon then
            -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
            tpToFirstEnemyPartStep()                     
        end 
        warn("No valid enemies found within range!")
        return nil
    end
    
    table.sort(validEnemies, function(a, b) return a.distance < b.distance end)
    return validEnemies[1].enemy
end
-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏à‡∏°‡∏ï‡∏µ
function attack(enemy)
    local enemyPosition = enemy.HumanoidRootPart.Position
    local adjustedPosition = Vector3.new(enemyPosition.X + 1, enemyPosition.Y , enemyPosition.Z)
    local petNames = {}

    for _, folder in ipairs(workspace.__Main.__Pets:GetChildren()) do
        if folder:FindFirstChild(enemy.Name) then
            enemyData = folder[enemy.Name]
            table.insert(petNames, enemyData)
            break
        end
    end

    -- for _, pet in pairs(workspace.__Main.__Pets["3080585905"]:GetChildren()) do
     --   table.insert(petNames, pet.Name)
   -- end

    local petPosArgs = {}
    for _, petName in pairs(petNames) do
        petPosArgs[petName] = adjustedPosition
    end

    local args = {
        [1] = {
            [1] = {
                ["PetPos"] = petPosArgs,
                ["AttackType"] = "All",
                ["Event"] = "Attack",
                ["Enemy"] = enemy.Name
            },
            [2] = "\5"
        }
    }
    character:SetPrimaryPartCFrame(CFrame.new(adjustedPosition))
    wait(0.2)
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
end
function equipBestPets()
    local player = game:GetService("Players").LocalPlayer
    local inventory = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Inventory")

    if inventory and inventory:FindFirstChild("Pets") then
        local petsFolder = inventory.Pets
        local maxRank = 0
        local bestPets = {} -- ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ Rank ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
        for _, pet in ipairs(petsFolder:GetChildren()) do
            if pet:IsA("Folder") or pet:IsA("Model") then
                local attributes = pet:GetAttributes() -- ‡∏î‡∏∂‡∏á Attributes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                if attributes and attributes.Rank then
                    local petRank = tonumber(attributes.Rank)
                    if petRank then
                        if petRank > maxRank then
                            maxRank = petRank
                            bestPets = {pet.Name} -- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ Rank ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                        elseif petRank == maxRank then
                            table.insert(bestPets, pet.Name) -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ Rank ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
                        end
                    end
                else
                    print("Pet has no Rank attribute:", pet.Name)
                end
            end
        end
        -- ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠ Equip ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if #bestPets > 0 then
            local args = {
                [1] = {
                    [1] = {
                        ["Event"] = "EquipBest",
                        ["Pets"] = bestPets
                    },
                    [2] = "\t"
                }
            }
            game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
            print("Equipped Best Pets:", table.concat(bestPets, ", "))
        else
            print("No pets found with a valid Rank.")
        end
    else
        print("No Pets Inventory Found!")
    end
end
local VirtualInputManager = game:GetService("VirtualInputManager")
function Button1Down()
    local x, y = workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2
    VirtualInputManager:SendMouseButtonEvent(x - 200, y, 0, true, game, 0)
    wait(0.05)
    VirtualInputManager:SendMouseButtonEvent(x - 200, y, 0, false, game, 0)
end   
function PunchATT(Enemye)
       
    while Punch do
        local args = {
            [1] = {
                [1] = {
                    ["Event"] = "PunchAttack",
                    ["Enemy"] = Enemye
                },
                [2] = "\5"
            }
        }
        Button1Down()
        game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
        wait(0.15) -- ‡πÄ‡∏û‡∏¥‡πà‡∏° wait ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏†‡∏≤‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    end
end
function autoCreateAndStartDungeonex()
    local args = {
        [1] = {
            [1] = {
                ["Type"] = "Gems",
                ["Event"] = "DungeonAction",
                ["Action"] = "BuyTicket"
            },
            [2] = "\n"
        }
    }  
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
    -- ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô Start
    task.wait(0.15)
    -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Create
    local argsCreate = {
        [1] = {
            [1] = {
                ["Event"] = "DungeonAction",
                ["Action"] = "Create"
            },
            [2] = "\n"
        }
    }
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(argsCreate))

    -- ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô Start
    task.wait(0.25)

    -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Start
    local argsStart = {
        [1] = {
            [1] = {
                ["Dungeon"] = doubleID,
                ["Event"] = "DungeonAction",
                ["Action"] = "Start"
            },
            [2] = "\n"
        }
    }
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(argsStart))
end
local function autoCreateAndStartDungeon()
    local dungeonFolder = workspace:FindFirstChild("__Main")
    if not dungeonFolder then
        warn("‡πÑ‡∏°‡πà‡∏û‡∏ö __Main ‡πÉ‡∏ô workspace")
        return
    end

    dungeonFolder = dungeonFolder:FindFirstChild("__Dungeon")
    if not dungeonFolder then
        warn("‡πÑ‡∏°‡πà‡∏û‡∏ö __Dungeon ‡πÉ‡∏ô __Main")
        return
    end

   -- print("=== ‡∏™‡πÅ‡∏Å‡∏ô Dungeon ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Auto Start ===")
    for _, obj in ipairs(dungeonFolder:GetDescendants()) do
        if (obj:IsA("Model") or obj:IsA("BasePart")) and obj.Name == "Dungeon" then
            local doubleID = obj:GetAttribute("DoubleID")
            local doubleRank = obj:GetAttribute("DoubleRank")

            if doubleID then
                print("- Dungeon:", obj:GetFullName())
                print("  DoubleID:", doubleID)
                print("  DoubleRank:", doubleRank)
                local args = {
                    [1] = {
                        [1] = {
                            ["Type"] = "Gems",
                            ["Event"] = "DungeonAction",
                            ["Action"] = "BuyTicket"
                        },
                        [2] = "\n"
                    }
                }
                
                game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
                task.wait(0.15)
                -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Create
                local argsCreate = {
                    [1] = {
                        [1] = {
                            ["Event"] = "DungeonAction",
                            ["Action"] = "Create"
                        },
                        [2] = "\n"
                    }
                }
                game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(argsCreate))

                -- ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô Start
                task.wait(0.25)

                -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Start
                local argsStart = {
                    [1] = {
                        [1] = {
                            ["Dungeon"] = doubleID,
                            ["Event"] = "DungeonAction",
                            ["Action"] = "Start"
                        },
                        [2] = "\n"
                    }
                }
                game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(argsStart))

                print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° Dungeon ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                break -- ‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏à‡∏≠‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            end
        end
    end
end
function Autoinfex()

    local args = {
        [1] = {
            [1] = {
                ["Event"] = "JoinCastle"
            },
            [2] = "\n"
        }
    }
    game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args)) 
end
-- ====== ‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏õ‡∏´‡∏≤‡∏°‡∏≠‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ 100m ======
function tpToEnemy(enemy)
    local enemyPosition = enemy.HumanoidRootPart.Position
    local characterPosition = character.PrimaryPart.Position
    local direction = (enemyPosition - characterPosition).Unit
    local stepDistance = 80
    local minDistance = 150

    while true do
        local distance = (characterPosition - enemyPosition).Magnitude
        if distance <= minDistance then break end

        local moveDistance = math.min(stepDistance, distance)
        local nextPosition = characterPosition + direction * moveDistance
        character:SetPrimaryPartCFrame(CFrame.new(nextPosition))

        characterPosition = nextPosition
        task.wait(0.2)
    end

    -- ‡πÑ‡∏õ‡∏¢‡∏∑‡∏ô‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ ‡∏°‡∏≠‡∏ô
    local adjustedPosition = enemyPosition + Vector3.new(1, 0, 0)
    character:SetPrimaryPartCFrame(CFrame.new(adjustedPosition))
end
   
function attackLoopDungen()  
    while attackRunningDungen do  -- ‡πÉ‡∏ä‡πâ attackRunning ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        local closestEnemy = getClosestEnemyWithinRangeEx(TP_RANGE)
        --local closestEnemy, nextClosestEnemy = findClosestEnemies()
        if not closestEnemy then
            warn("No enemy found!")
            break
        end  

        -- ‡πÄ‡∏ó‡πÄ‡∏•‡∏û‡∏≠‡∏£‡πå‡∏ï‡πÑ‡∏õ‡∏´‡∏≤‡∏°‡∏≠‡∏ô
        --tpToEnemyss(closestEnemy)      
        -- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞
        if autoDungeon then
           autoCreateAndStartDungeon()  -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏±‡∏ô‡πÄ‡∏à‡∏µ‡πâ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà
        end
        if autoinf then           
            Autoinfex()  -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏±‡∏ô‡πÄ‡∏à‡∏µ‡πâ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà  
            
        end

        if equipBestPetsex then
            equipBestPets()  -- ‡∏™‡∏ß‡∏°‡πÉ‡∏™‡πà‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        end

        -- ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        attack(closestEnemy)
        wait(0.2)

        attack(closestEnemy)
        --if  Punch then
        --    PunchATT(closestEnemy.Name)          
        --end
        
        local hp = getEnemyHPX2(closestEnemy)
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ HP ‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if hp <= 0 then
            repeat
            --wait(0.2)
            until getEnemyHPX2(closestEnemy) <= 0
            getEnemyCapture(closestEnemy.Name)           
        end
        -- ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà HP > 0 ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ TP
        repeat
            wait(0.1)
            closestEnemy = getClosestEnemyWithinRangeEx(TP_RANGE)
        until closestEnemy and getEnemyHPX2(closestEnemy) > 0  
        tpToEnemy(closestEnemy)
        if closestEnemy then
            closestEnemy = getClosestEnemyWithinRangeEx(TP_RANGE)
            tpToEnemy(closestEnemy)
        end
        wait(0.1)

    end
    attackRunningDungen = false  -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
end
----**Auto Sell**----
function autosell()
    local player = game:GetService("Players").LocalPlayer
    local inventory = player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Inventory")

    if inventory and inventory:FindFirstChild("Pets") then
        local petsFolder = inventory.Pets
        local petsToSell = {} -- ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢

        for _, pet in ipairs(petsFolder:GetChildren()) do
            if pet:IsA("Folder") or pet:IsA("Model") then
                local attributes = pet:GetAttributes() -- ‡∏î‡∏∂‡∏á Attributes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                if attributes and attributes.Rank then
                    local petRank = tonumber(attributes.Rank)
                    if petRank and petRank == SelectRank then
                        --print("Selling Pet with Rank 1:", pet.Name)
                        table.insert(petsToSell, pet.Name) -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                    end
                else
                    --print("Pet has no Rank attribute:", pet.Name)
                end
            end
        end

        -- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Rank ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        if #petsToSell > 0 then
            for _, petName in ipairs(petsToSell) do
                local args = {
                    [1] = {
                        [1] = {
                            ["Event"] = "SellPet",
                            ["Pets"] = {
                                [1] = petName
                            }
                        },
                        [2] = "\5"
                    }
                }
                game:GetService("ReplicatedStorage").BridgeNet2.dataRemoteEvent:FireServer(unpack(args))
                --print("Sold Pet:", petName)
                wait(0.1) -- ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            end
        else
           -- print("No pets with Rank 1 found to sell.")
        end
    else
       -- print("No Pets Inventory Found!")
    end
end
function autosellex()
while autosellexe do
    autosell()
    wait(10) -- ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏¢‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
end
end
